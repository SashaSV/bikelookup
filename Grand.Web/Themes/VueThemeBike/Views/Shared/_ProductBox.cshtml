@model ProductOverviewModel
@{
    //prepare "Add to cart" Axios link
    string addtocartlink = "";
    string addtowishlistlink = "";
    string quickviewurl = Url.RouteUrl("QuickView-Product", new { productId = Model.Id });

    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (!Model.ShowQty)
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    }
    else
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist });
    }
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}

@await Component.InvokeAsync("Widget", new { widgetZone = "productbox_before_content", additionalData = Model})
<b-card no-body tag="article" v-bind:class="{ mobile: isMobile()}" class="product-box mb-2">
    <div class="picture-container">
        <b-link class="img-container" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <b-card-img-lazy alt="@Model.DefaultPictureModel.AlternateText" class="main-product-img" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title"></b-card-img-lazy>
            @if (!string.IsNullOrEmpty(Model.SecondPictureModel.ImageUrl))
            {
                <b-card-img-lazy class="hover-img" alt="@Model.SecondPictureModel.AlternateText" src="@Model.SecondPictureModel.ImageUrl"></b-card-img-lazy>
            }
        </b-link>
    </div>
    <b-card-body>
        <div class="prices-rating">
                    @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                    {
                        decimal ratingValue = 0;
                        if (Model.ReviewOverviewModel.TotalReviews != 0)
                        {
                            ratingValue = Convert.ToDecimal(((Model.ReviewOverviewModel.RatingSum * (double)100) / Model.ReviewOverviewModel.TotalReviews) / (double)100);
                        }
                        <template>
                            <div class="rating">
                                <b-form-rating id="rating-inline-grid-@Model.Id" aria-label="Rating" class="p-0" variant="warning" no-border size="sm" readonly inline value="@(ratingValue)" color="#F15A24"></b-form-rating>
                                <b-link href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@string.Format("(0)",Model.ReviewOverviewModel.TotalReviews)</b-link>
                            </div>
                        </template>
                    }
                  
                </div>
        <h3 class="card-title mb-0">
            <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">
                @Model.Name
            </a>
        </h3>
        @if (Model.ShowSku && !string.IsNullOrEmpty(Model.Sku))
        {
            <span class="sku">@Model.Sku</span>
        }
        @if (Model.ProductType == ProductType.Auction)
          {
                
              @if (Model.EndTime.HasValue)
              {
                  <div class="countdown-box alert alert-info w-100 mb-1">
                      @if (Model.EndTime > DateTime.UtcNow)
                      {
                          <countdown :end-time="@Model.EndTime.Value.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds">
                              <template v-slot:process="{ timeObj }">
                                  <span class="col-form-label">@T("AddToCart.Timeleft"):</span>
                                  <span>{{ `${timeObj.d}` }} : </span>
                                  <span>{{ `${timeObj.h}` }} : </span><span>{{ `${timeObj.m}` }} : </span>
                                  <span>{{ `${timeObj.s}` }}</span>
                              </template>
                              <template v-slot:finish>
                                  <span>@T("ShoppingCart.Auctionends")</span>
                              </template>
                              </countdown>
                      }
                      else
                      {
                          <div class="d-inline-flex flex-wrap justify-content-center">
                              <label class="ended-label">@T("ShoppingCart.Auctionends"):</label>
                              <div class="count-date">@Model.EndTimeLocalTime.Value.ToString()</div>
                              </div>
                      }</div>
              }
          }
        <div class="prices @if (Model.ProductType == ProductType.Reservation) { <text>reservation-price</text> } ">
           @if (Model.ProductType != ProductType.Auction)
               {
                   <div class="actual-price price">
                       @Model.ProductPrice.Price
                   </div>
               }
              else
               {
                 <div class="actual-price price">
                    @(Model.ProductPrice.HighestBidValue > 0 ? Model.ProductPrice.HighestBid : Model.ProductPrice.StartPrice)
                 </div>
               }
              @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
              {
                <div class="old-price price">
                 @Model.ProductPrice.OldPrice
                 </div>
                 }
        </div>

        @if (Model.ProductPrice.DisplayTaxShippingInfo)
        {
            var inclTax = Model.TaxDisplayType == TaxDisplayType.IncludingTax;
            <div class="tax-shipping-info">
                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new {SeName = TopicSeNameConstants.Shippinginfo}))
            </div>
        }
    </b-card-body>
    <template v-slot:footer>

        @if (Model.ShowQty)
        {
            var qtyId = "addtocart_" + @Model.Id + "_EnteredQuantity";
            <input class="form-control input-group-addon catalog-quantity" type="number" id="@qtyId" name="@qtyId" value="1">
        }
        <b-button-group>
            @if (!Model.ProductPrice.DisableWishlistButton && Model.ProductType == ProductType.SimpleProduct)
            {
                <b-button v-b-tooltip.hover.bottom title="@T("ShoppingCart.AddToWishlist")" class="btn btn-secondary" onclick="AxiosCart.addproducttocart_catalog('@addtowishlistlink', '@Model.ShowQty', '@Model.Id');return false;">
                    <b-icon icon="heart"></b-icon>
                    <span class="sr-only">AddToWishlist</span>
                </b-button>
            }
            @if (!Model.ProductPrice.DisableAddToCompareListButton && Model.ProductType == ProductType.SimpleProduct)
            {
                <b-button v-b-tooltip.hover.bottom title="@T("ShoppingCart.AddToCompareList")" class="btn btn-secondary" onclick="AxiosCart.addproducttocomparelist('@addtocomparelink');return false;">
                    <span class="sr-only">AddToCompareList</span>
                    <b-icon icon="shuffle"></b-icon>
                </b-button>
            }
        </b-button-group>
    </template>
</b-card> 