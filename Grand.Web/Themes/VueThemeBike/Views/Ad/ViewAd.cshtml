@model ViewAdModel
@inject Grand.Domain.Customers.CustomerSettings customerSettings
@inject IPageHeadBuilder pagebuilder
@inject IThemeContext themeContext
@{
    Layout = "_ColumnsOne";
    var themeName = themeContext.WorkingThemeName;
    pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/product/product.css", themeName));
    pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/ad/ad.css", themeName));

    //title
    pagebuilder.AddTitleParts(T("PageTitle.Account").Text);
    pagebuilder.AppendScriptParts(ResourceLocation.Head, "~/scripts/admin.search.js", excludeFromBundle: true);
    pagebuilder.AppendScriptParts(ResourceLocation.Head, "~/scripts/jquery-ui-1.12.1.custom/jquery-ui.min.js", excludeFromBundle: true);
    pagebuilder.AppendScriptParts(ResourceLocation.Head, "~/scripts/jquery.validate.unobtrusive.min.js", excludeFromBundle: true);
    pagebuilder.AppendScriptParts(ResourceLocation.Head, "~/scripts/jquery.validate.min.js", excludeFromBundle: true);

    pagebuilder.AppendScriptParts(ResourceLocation.Head, "~/scripts/typeahead.js", excludeFromBundle: true);
    pagebuilder.AppendScriptParts(ResourceLocation.Head, "~/administration/build/js/jquery.min.js", excludeFromBundle: true);


}
@*@section left
    {
        @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Ads })
    }*@

@Html.AntiForgeryToken()

@section Breadcrumb
{
    <partial name="_AdBreadcrumb" model="Model.Breadcrumb" />
}

@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page product-standard product-grouped">
    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
    <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
        <div class="product-essential">
            <b-container class="picture-block" fluid>
                <div class="product-name">
                    <h2 class="generalTitle mb-3" itemprop="name" align="left">@Model.AdPructName</h2>
                </div>
                <b-row>
                    <vc:widget widget-zone="productdetails_before_pictures" additional-data="@Model.Id"></vc:widget>
                    <partial name="_AdDetailsPictures" model="Model" />
                    <vc:widget widget-zone="productdetails_after_pictures" additional-data="@Model.Id"></vc:widget>
                    <b-col xl="6" lg="6" md="7" cols="12" class="overview pl-md-3 pl-0 pr-0">
                    </b-col>
                </b-row>
                @*<b-row>
                    <b-col xl="2" lg="3" md="4">
                        <b-avatar size="6rem" alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.ImageUrl">
                    </b-col>
                    <b-col xl="10" lg="9" md="8" class="align-items-center d-flex">
                        <div>
                            <h1 class="h2 generalTitle w-100">
                                Александр (New York)
                            </h1>
                
                            @await Component.InvokeAsync("Widget", new { widgetZone = "vendordetails_top", additionalData = Model.Id })
                         
                    </b-col>
                </b-row>*@
            </b-container>
            <b-container class="description-block" fluid>
                <b-row>
                    <div class="DateUtc">
                        <span> @T("Account.ViewAds.DatePublished")</span>
                        <span> @Model.CreatedOnUtc.ToString("D") </span>
                    </div>
                </b-row>
                <b-row>
                    <div class="ad-price">
                        @Model.AdTotal
                    </div>
                </b-row>

                <b-row class="ad-tags">
                    @if (Model.IsAuction)
                    {
                        <div class="tag-ad auction">
                            <span>@T("Account.ViewAds.IsAuction")</span>
                        </div>
                    }
                    <div class="tag-ad condition">
                        @T("Account.ViewAds.Condition"):
                        <span>@(Model.Mileage > 0 ?T("Ad.Fields.Condition.NotNew") :T("Ad.Fields.Condition.New"))</span>
                    </div>
                    <div class="tag-ad milage">
                        Пробег:
                        <span>@Model.Mileage км</span>
                    </div>
                    @if (Model.WithDocuments)
                    {
                        <div class="tag-ad withDocument">
                            <span>@T("Ad.Fields.Document.With")</span>
                        </div>
                    }
                    else
                    {
                        <div class="tag-ad withoutDocument">
                            <span>@T("Ad.Fields.Document.Without")</span>
                        </div>
                    }
                </b-row>
                <b-row>
                    <div class="Comment-header">
                        <span> @T("Account.ViewAds.Comment")</span>
                    </div>
                    <div class="Comment-description">
                        @Html.Raw(Grand.Core.Html.HtmlHelper.FormatText(Model.AdComment))
                    </div>
                </b-row>
                <b-row>
                    <div class="bottom-descr">
                        <div class="bottom-descr-group">
                            <div class="IdAd">
                                <span> Id: </span>
                                <span> @Model.AdNumber</span>
                            </div>
                            <div class="CntViewedAd">
                                <span> @T("Account.ViewAds.CntViewed"): </span>
                                <span> 1120 </span>
                            </div>
                        </div>
                    </div>
                </b-row>
            </b-container>
        </div>
    </div>

    @*@await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })*@
    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
</div>
@*<div class="page account-page customer-info-page pl-lg-3 pt-3 pt-lg-0">
        <h2 class="generalTitle">@T("Ads.ViewAd")</h2>

    </div>*@

