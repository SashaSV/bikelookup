@model PrivateMessageChatModel
@inject IPageHeadBuilder pagebuilder
@inject IWorkContext workContext
@inject IThemeContext themeContext
@{
    var themeName = themeContext.WorkingThemeName;
    var supportRtl = workContext.WorkingLanguage.Rtl;

    pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/ad/ad.css", themeName));

}
@{
    var dates = Model.Messages.GroupBy(x => x.CreatedOn.Date).OrderBy(x => x.Key);
    Layout = "_ColumnsOne";

    pagebuilder.AddTitleParts(T("PageTitle.ViewPM").Text);
}
<div class="page private-messages private-message-view-page">
    <div class="view-ad">
        <partial name="_AdsList" model="Model.Ad" />
    </div>
    <h1 class="h4 generalTitle text-xs-center">@T("PrivateMessages.View.ViewMessage")</h1>
    @foreach (var date in dates)
    {
        <div class="date-message">@date.Key.ToString("D")</div>
        <ul class="messages">
            @foreach (var message in date)
            {
                <li class="view-message">
                    @if (!string.IsNullOrEmpty(message.FromCustomerId))
                    {
                        <div class="message-body-from">
                            <div class="message-label">
                                <label>@message.CustomerFromName</label>
                            </div>
                            <div class="message-text-from">
                                <div class="message">
                                    <span>@Html.Raw(message.Message)</span>
                                </div>

                                <div class="msg-right"></div>
                            </div>
                            <div class="message-time">
                                @(message.CreatedOn.Hour.ToString() + ":" + message.CreatedOn.Minute.ToString())
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(message.ToCustomerId))
                    {
                        <div class="message-body-to">
                            <div class="message-label"> <label>@T("PrivateMessagesAd.View.YourMessage")</label> </div>
                            <div class="@(message.IsRead ? "message-text-to pm-read" : "message-text-to pm-unread")">
                                <div class="message">
                                    <span>@Html.Raw(message.Message)</span>
                                    <div class="chat-status-icon">
                                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check2-all @(message.IsRead ? "read" : "unread")" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" d="M12.354 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
                                            <path d="M6.25 8.043l-.896-.897a.5.5 0 1 0-.708.708l.897.896.707-.707zm1 2.414l.896.897a.5.5 0 0 0 .708 0l7-7a.5.5 0 0 0-.708-.708L8.5 10.293l-.543-.543-.707.707z" />
                                        </svg>
                                    </div>
                                </div>
                                <div class="msg-left"></div>
                            </div>
                            <div class="message-time">@(message.CreatedOn.Hour.ToString() + ":" + message.CreatedOn.Minute.ToString())</div>
                        </div>
                    }
                </li>
            }
        </ul>
    }
    <partial name="_FormSentPrivateMessage" model="Model" />
</div>
