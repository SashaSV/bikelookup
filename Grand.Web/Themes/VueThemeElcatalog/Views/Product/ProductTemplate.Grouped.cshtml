@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@inject SeoSettings seoSettings
@using Grand.Framework.Themes
@using Grand.Framework.UI
@using ColorHelper
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject IPageHeadBuilder pagebuilder

@{
    var themeName = themeContext.WorkingThemeName;
    var supportRtl = workContext.WorkingLanguage.Rtl;
    if (supportRtl)
    {
        pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/product/product.rtl.css", themeName));
    }
    else
    {
        pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/product/product.css", themeName));
    }
}
@{
    Layout = "_ColumnsOne";

    //title, meta
    pagebuilder.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    pagebuilder.AddMetaDescriptionParts(Model.MetaDescription);
    pagebuilder.AddMetaKeywordParts(Model.MetaKeywords);

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        pagebuilder.AddCanonicalUrlParts(productUrl);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        pagebuilder.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        pagebuilder.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        pagebuilder.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
@{
    //prepare "Add to cart" Axios link
  
    string addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = 1});
    //var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var filter = new RgbRandomColorFilter();
    
    Random random = new Random(DateTime.Now.Millisecond);
    
    var products = Model.AssociatedProducts.Where(p => p.VendorModel != null);
    
    var chartDatasets = products.Select((a)=>new
    {
        label = a.VendorModel?.Name,
        backgroundColor = (new RGB((byte) random.Next((int) filter.minR, (int) filter.maxR), (byte) random.Next((int) filter.minG, (int) filter.maxG), (byte) random.Next((int) filter.minB, (int) filter.maxB))
            ).ToString(),
        data = a.TierPrices.Select(p=>p.PriceValue)
    });

    var lables = products.SelectMany(a=>a.TierPrices.Select	(tp=>tp.DateStart))
        .Distinct()
        .OrderBy(p=>p).Select(d=>d.ToString	()).ToList	();
}

<script>  
       var LineChartData =  
        {  
            labels:@Html.Raw(Json.Serialize(lables)),  
            datasets: @Html.Raw(Json.Serialize(chartDatasets))
        };                                 
</script>  

<script src="~/Themes/VueThemeElcatalog/Content/script/chart.js/dist/chart.js"></script>
<!--product breadcrumb-->
@section Breadcrumb
{
    <partial name="_ProductBreadcrumb" model="Model.Breadcrumb" />
}
@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page product-standard product-grouped">
    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
       <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
            <b-container class="product-essential" fluid>
              
                    <div class="product-name">
                        <h2 class="generalTitle mb-3" itemprop="name" align="left">@Model.Name</h2>
                    </div>
                    <b-row>
                        <b-col cols="12" class="px-0 my-3">
                            <b-row>
                                <b-tabs class="w-100" content-class="mt-3" align="left" lazy="true">

                                    <b-tab title="@T("Products.Sellers")">
                                        <partial name="_ProductHeader" model="Model"/>
                                        <partial name="_ProductVendorList" model="Model"/>
                                    </b-tab>

@*                                    @if (false)
                                    {
                                        <b-tab title="@T("Products.Specs")">
                                            <partial name="_ProductProposals" model="Model" />
                                            <div class="spec-group container">
                                                <partial name="ProductDescBox" model="Model" />
                                            </div>
                                        </b-tab>

                                        <b-tab title="@T("Products.Geometry")">
                                            <partial name="_ProductProposals" model="Model" />
                                            <partial name="_ProductGeometryPictures" model="Model" />
                                        </b-tab>
                                    }*@ 

                                    @*<b-tab title="@T("Products.ContactUs")">
                                        <partial name="_ProductProposals" model="Model"/>
                                        <partial name="_AskQuestionOnProduct" model="Model.ProductAskQuestion"/>
                                    </b-tab>*@

                                    @if (Model.OpenedPage == "review")
                                    {
                                        <b-tab id="review-tab" title="@T("Products.Reviews")" active>
                                            <partial name="_ProductProposals" model="Model"/>
                                            @await Component.InvokeAsync("ProductReviews", new { productId = Model.Id })
                                        </b-tab>

                                    }
                                    else
                                    {
                                        <b-tab id="review-tab" title="@T("Products.Reviews")">
                                            <partial name="_ProductProposals" model="Model"/>
                                            @await Component.InvokeAsync("ProductReviews", new { productId = Model.Id })
                                        </b-tab>
                                    }

                                </b-tabs>

                            </b-row>
                        </b-col>
                    </b-row>
             
            </b-container>
        </div>
        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
   
    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
    
</div>
